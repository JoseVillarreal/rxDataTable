/*! rxDataTable v0.3.6 by Stephen Golub(stephen.golub@rackspace.com) - https://github.com/nickburns2006/rxDataTable - New BSD License */

var app=angular.module("rxDataTable",[]);app.directive("rxDataTable",function($http,$timeout,$document,$filter,PageTracking){return{restrict:"E",templateUrl:"src/templates/rx-data-table.html",replace:!0,scope:{pager:"=?",columnConfiguration:"=",columnDisplay:"=",columnPresets:"=",rowKey:"@",rowStyle:"@",itemName:"@",listOfData:"&",predicate:"=?",checkboxEvent:"&",columnMultiSort:"@",notifyDuration:"@",columnReordering:"@"},link:function(scope){scope.configurationVisible=!1,scope.enableColumnMultiSort=_.isEmpty(scope.columnMultiSort)?!1:scope.columnMultiSort,scope.enableColumnReordering=_.isEmpty(scope.columnReordering)?!1:scope.columnReordering,scope.defaultNotificationDuration=_.isUndefined(scope.notifyDuration)?3e3:parseInt(scope.notifyDuration,10),_.isUndefined(scope.pager)&&(scope.pager=PageTracking.createInstance()),scope.getSortField=function(a){return(a.sortField||a.sortField!==!1)&&a.sortField||a.dataField},scope.allowEditing=function(a,b){return _.has(a,"editable")&&a.editable.clause(b)},scope.getEditType=function(a,b){return scope.allowEditing(a,b)?_.has(a.editable,"data")?"typeahead":_.has(a.editable,"options")?"select":"text":!1},scope.getNGClass=function(a,b){var c={};if(_.has(a,"editable")&&_.has(a.editable,"nullable")&&(c.nullable=a.editable.nullable),_.has(a,"ng-class")&&_.isFunction(a["ng-class"])){var d=a["ng-class"],e=d(b);_.isEmpty(e)||(c[e]=!0)}else _.has(a,"ng-class")&&_.isObject(a["ng-class"])&&c.extend(a["ng-class"]);return c},scope.getEditableOptions=function(a,b){if(_.has(a,"editable")){var c=a.editable;if(_.has(c,"data")){var d=c.data(b);return _.isArray(d)?d:[]}if(_.has(c,"options"))return c.options}return[]},scope.nullField=function(a,b,c){_.has(a.editable,"nullable")&&a.editable.nullable&&scope.updateField(a,b,null,c)},scope.showStatusMessage=function(a,b,c){_.isUndefined(c)&&(c=scope.defaultNotificationDuration),scope.updateFieldStatus={status:a,message:b},_.isNumber(c)&&$timeout(scope.clearStatusMessage.bind(scope),c)},scope.clearStatusMessage=function(){scope.updateFieldStatus=void 0},scope.updateField=function(a,b,c,d){if(_.has(a.editable,"endpoint")){scope.showStatusMessage("saving",'Saving value for "'+a.title+'"',!1);var e=$http[a.editable.endpoint.method],f={};f[a.dataField]=c;for(var g=a.editable.endpoint.url,h=/\{(\w+)\}/.exec(g);h;)g=g.replace(h[0],b[h[1]]),h=/\{(\w+)\}/.exec(g);return _.isEmpty(d)||_.isEmpty(d.$form)||d.$form.$hide(),_.has(a.editable,"preUpdate")&&_.isFunction(a.editable.preUpdate)&&!a.editable.preUpdate(a,b,c)?void scope.showStatusMessage("error","There was an error running the pre update method and the data was not saved."):(e(g,f).then(function(){return scope.showStatusMessage("success",'Saved data for "'+a.title+'" field'),b[a.dataField]=_.clone(c),_.has(a.editable,"postUpdateSuccess")&&_.isFunction(a.editable.postUpdateSuccess)&&a.editable.postUpdateSuccess(a,b,c),!0},function(c){var d;try{d=JSON.parse(c)}catch(e){}var f='Error saving data for "'+a.title+'" field';return _.has(d,"error")&&(f.message+="\n"+d.error.message),scope.$emit("data-table-error",f),_.has(a.editable,"postUpdateError")&&_.isFunction(a.editable.postUpdateError)&&a.editable.postUpdateError(a,b,c),!1}).then(function(){return $timeout(scope.clearStatusMessage.bind(scope),scope.defaultNotificationDuration),!0}),!1)}return!1},scope.$on("data-table-error",function(a,b,c){_.isEmpty(c)&&(c=scope.defaultNotificationDuration),scope.showStatusMessage("error",b,c),$timeout(function(){scope.updateFieldStatus=void 0},c)}),scope.iconUnwrap=function(a,b,c){return _.filter(a.icon,function(a){return _.has(a,"fieldValue")&&a.fieldValue===this.row[a.field]?!0:b[a.field]===!0?!0:void 0},{row:b}).filter(function(a){return _.has(a,"name")&&"i"===this.type||_.has(a,"class")&&"div"===this.type?!0:void 0},{type:c})},scope.rowClass=function(row){if(!_.isEmpty(scope.rowStyle)){if(_.has(scope,"rowStyleObject")||(scope.rowStyleObject=eval("("+scope.rowStyle+")")),!scope.rowStyleObject.bool){var fClass=row[scope.rowStyleObject.field];return fClass=isNaN(parseInt(fClass.toString().charAt(0),10))?fClass:"_"+fClass.toString(),scope.rowStyleObject.class+" "+fClass}if(row[scope.rowStyleObject.field])return scope.rowStyleObject.class}},scope.checkAll=function(){var a=document.querySelectorAll('div.data-table input[type="checkbox"]'),b=document.querySelector('div.data-table input[type="checkbox"]#check_all_checkbox');_.forEach(a,function(a){a.checked!==this.checked&&angular.element(a).triggerHandler("click")},b)},scope.hasValue=function(a,b){return _.isArray(b.dataField)?_.any(b.dataField,function(a){return _.has(this,a)&&!_.isEmpty(this,a)},a):_.has(a,b.dataField)&&!_.isEmpty(a,b.dataField)},scope.getColumnValue=function(a,b){var c="",d=_.has(a,"displayField")&&_.has(b,a.displayField)?a.displayField:a.dataField;return _.has(b,d)&&(c=_.has(a,"filter")?$filter(a.filter)(b[d]):b[d]),_.isEmpty(c)&&_.has(a,"emptyValue")?a.emptyValue:c},scope.clickAction=function(a){var b="checkbox_"+a,c=document.querySelector('input[type="checkbox"]#'+b);return scope.checkboxEvent?scope.checkboxEvent(a,c,c.checked):void 0},scope.decompilePredicateString=function(a){if(_.isObject(a))return a;var b=!1;return _.isArray(a)&&(a=1===a.length&&a[0]||"emptysort"),"-"===a.substr(0,1)&&(a=a.substr(1),b=!0),{column:a,reverse:b}},scope.getPresetConfiguration=function(){return _.isNumber(scope.columnDisplay.index)||(scope.columnDisplay.index=0),scope.isPresetCustom()||(scope.columnDisplay.config=_.clone(scope.getColumnPresets()[scope.columnDisplay.index].config)),scope.columnDisplay.config},scope.getConfig=function(){var a=[];return _.forEach(scope.getPresetConfiguration(),function(a){this.visibleColumns.push(this.columns[a])},{visibleColumns:a,columns:scope.columnConfiguration}),a},scope.getColumnPresets=function(){return _.isEmpty(scope.columnPresets)&&(scope.columnPresets=[]),scope.columnPresets},scope.markPresetAsCustom=function(){var a=scope.getColumnPresets();_.find(a,{title:"User Preset"})?a[a.length-1].config=_.clone(scope.columnDisplay.config):a.push({title:"User Preset",config:_.clone(scope.columnDisplay.config)}),_.isNumber(scope.columnDisplay.index)&&(scope.columnDisplay.index=a.length-1)},scope.getColumnPresetSelects=function(){return _.map(scope.getColumnPresets(),function(a,b){return{text:a.title,value:b}})},scope.isPresetCustom=function(){return"User Preset"==scope.getColumnPresets()[scope.columnDisplay.index].title},scope.moveColumn=function(a,b){scope.isPresetCustom()||scope.markPresetAsCustom();var c=scope.columnDisplay.config.splice(a,1)[0];scope.columnDisplay.config.splice(b,0,c)},scope.moveColumnUp=function(a){a>0&&scope.moveColumn(a,a-1)},scope.moveColumnDown=function(a){a<scope.columnDisplay.config.length-1&&scope.moveColumn(a,a+1)},scope.removeColumn=function(a){scope.isPresetCustom()||scope.markPresetAsCustom(),scope.columnDisplay.config.splice(a,1)},scope.showColumn=function(a){scope.isPresetCustom()||scope.markPresetAsCustom(),_.contains(scope.columnDisplay.config,a)||scope.columnDisplay.config.push(a)},scope.getAvailableColumns=function(){var a=[];return _.forEach(scope.columnConfiguration,function(a,b){this.push({value:b,text:a.title})},a),_.filter(a,function(a){return!_.contains(this,a.value)},scope.columnDisplay.config)},scope.findColumnFromPredicate=function(a){var b=_.find(scope.getConfig(),function(a){return this.pred==this.getSortField(a)},{pred:a,getSortField:scope.getSortField});return b||{}},scope.parseReverseSort=function(a,b){return _.isObject(a)?a.sortReverse?!b:b:scope.parseReverseSort(scope.findColumnFromPredicate(a),b)},scope.compilePredicateString=function(a,b,c){var d=c?a:scope.getSortField(a);return(scope.parseReverseSort(a,b)?"-":"")+d},scope.singleColumnSort=function(a){scope.pager.pageNumber=0,scope.predicate=scope.sortedBy(a)?[scope.compilePredicateString(a,!0)]:[scope.compilePredicateString(a)],angular.element(document).data("sortingData",scope.predicate)},scope.addColumnSort=function(a){var b=scope.getSortedIndex(a);-1===b?(b=scope.getSortedIndex(a,!0),b>=0?scope.predicate.length>1?scope.predicate.splice(b,1):scope.predicate[b]=scope.compilePredicateString(a):scope.predicate.push(scope.compilePredicateString(a))):scope.predicate[b]=scope.compilePredicateString(a,!0)},scope.sort=function(a,b){a.shiftKey?scope.addColumnSort(b):scope.singleColumnSort(b)},scope.getSortedIndex=function(a,b){var c=scope.compilePredicateString(a,b);return scope.predicate.indexOf(c)},scope.sortedBy=function(a,b){return scope.getSortedIndex(a,b)>=0},scope.reversePredicate=function(a){var b=scope.decompilePredicateString(scope.predicate[a]);b.reverse=scope.parseReverseSort(b.column,b.reverse),scope.predicate[a]=scope.compilePredicateString(b.column,!b.reverse,!0)},scope.updatePredicate=function(a,b){var c=scope.findColumnFromPredicate(b);_.isEmpty(c)||(scope.predicate[a]=scope.compilePredicateString(c))},scope.removePredicate=function(a){scope.predicate.length>1&&scope.predicate.splice(a,1)},scope.getSortableColumnSelects=function(){var a=[];return _.forEach(scope.getConfig(),function(a){this.retObj.push({text:a.title,value:this.getSortField(a)})},{retObj:a,getSortField:scope.getSortField}),_.filter(_.filter(a,"text"),"value")},scope.toggleVisibility=function(a){scope.configurationVisible=void 0!==a?a:!scope.configurationVisible},_.isUndefined(scope.predicate)&&(scope.predicate=[scope.compilePredicateString(scope.getConfig()[0])]),setTimeout(function(){angular.element(document.querySelector(".data-table-config-container")).on("click",function(a){a.stopPropagation()})},1),$document.on("click",function(){this.toggleVisibility(!1)}.bind(scope))}}}),app.filter("UnusedSorts",function(){return function(a,b,c){return _.filter(a,function(a){var b=(a.sortField||a.sortField!==!1)&&a.sortField||a.dataField;return c==b?!0:!(_.contains(this.predicate,b)||_.contains(this.predicate,"-"+b))},{predicate:b})}}),app.filter("ColumnValue",function(a){return function(b,c,d){var e={value:""};d=_.isUndefined(d)?!0:d;var f=_.has(c,"displayField")&&_.has(b,c.displayField)?c.displayField:c.dataField;return _.isArray(f)||(f=[f]),_.forEach(f,function(b,c,d){_.has(this.row,b)&&(this.columnValue.value+=_.has(this.column,"filter")?a(this.column.filter)(this.row[b]):this.row[b],c<d.length-1&&(this.columnValue.value+="\n"))},{columnValue:e,column:c,row:b}),e=e.value,d&&(e=_.isEmpty(e)&&_.has(c,"emptyValue")?c.emptyValue:e),e}}),angular.module("rxDataTable").directive("rxDataTablePaginate",function(){return{templateUrl:"src/templates/rx-data-table-paginate.html",replace:!0,restrict:"E",scope:{pageTracking:"=",numberOfPages:"@"}}}).factory("PageTracking",function(){function a(a){this.MAX_PER_PAGE=50,this.MIN_PER_PAGE=10,this.ITEMS_PER_PAGE_STEP=10,this.itemsPerPage=10,this.pagesToShow=5,this.itemSizeList=[],this.pageNumber=0,this.pageInit=!1,this.total=0,this.showAll=a?!0:!1}return{createInstance:function(b){return new a(b)}}}).directive("rxDataTableItemsPerPage",function(a){return{restrict:"E",replace:!0,templateUrl:"src/templates/rx-data-table-itemsPerPage.html",scope:{label:"@",pager:"=?"},link:function(b){_.isUndefined(b.pager)&&(b.pager=a.createInstance()),b.pager.pageInit||(b.pager.pageInit=!0);try{b.updatePaging=function(){b.pager.ticketsPerPage=parseInt(b.pager.ticketsPerPage,10),b.pager.pageNumber=0}.bind(b)}catch(c){}b.pager.itemSizeList=_.range(b.pager.MIN_PER_PAGE,b.pager.MAX_PER_PAGE+b.pager.ITEMS_PER_PAGE_STEP,b.pager.ITEMS_PER_PAGE_STEP)}}}).filter("Paginate",function(a){return function(b,c){if(c||(c=a.createInstance()),c.showAll)return c.total=b.length,b;if(b){c.total=b.length,c.totalPages=Math.ceil(c.total/c.itemsPerPage);var d=c.pageNumber*c.itemsPerPage,e=d+c.itemsPerPage,f=e>b.length?b.length:e;return c.first=d+1,c.last=f,b.slice(d,f)}}}).filter("Page",function(a){return function(b){b||(b=a.createInstance());var c=[],d=b.pagesToShow||5,e=(d-1)/2,f=Math.ceil(e),g=Math.floor(e);if(b&&0!==b.length){var h=Math.max(Math.min(b.pageNumber-g,b.totalPages-d),0),i=Math.min(Math.max(b.pageNumber+f,d-1),b.totalPages-1);for(h;i>=h;h++)c.push(h)}return c}}),angular.module("rxDataTable").run(["$templateCache",function(a){a.put("src/templates/rx-data-table-itemsPerPage.html",'<form id="itemsPerPageForm" class="itemsPerPage"> <label for="itemsPerPageSelector">{{ label }}</label> <select name="itemsPerPageSelector" id="itemsPerPageSelector" ng-model="pager.itemsPerPage" ng-change="updatePaging()"> <option ng-repeat="i in pager.itemSizeList">{{ i }}</option> </select> </form> '),a.put("src/templates/rx-data-table-paginate.html",'<ul class="pagination"> <li ng-class="{disabled: pageTracking.pageNumber==0}" class="pagination-first"> <a ng-click="pageTracking.pageNumber=0" ng-hide="pageTracking.pageNumber==0">First</a> <span ng-show="pageTracking.pageNumber==0">First</span> </li> <li ng-class="{disabled: pageTracking.pageNumber==0}" class="pagination-prev"> <a ng-click="pageTracking.pageNumber=(pageTracking.pageNumber - 1)" ng-hide="pageTracking.pageNumber==0">« Prev</a> <span ng-show="pageTracking.pageNumber==0">« Prev</span> </li> <li ng-repeat="n in pageTracking | Page " ng-class="{active: n==pageTracking.pageNumber, \'page-number-last\': n==pageTracking.totalPages - 1}" class="pagination-page"> <a ng-click="pageTracking.pageNumber=n">{{n + 1}}</a> </li> <li ng-class="{disabled: pageTracking.pageNumber==pageTracking.totalPages - 1 || pageTracking.total==0}" class="pagination-next"> <a ng-click="pageTracking.pageNumber=(pageTracking.pageNumber + 1)" ng-hide="pageTracking.pageNumber==pageTracking.totalPages - 1 || pageTracking.total==0"> Next »</a> <span ng-show="pageTracking.pageNumber==pageTracking.totalPages - 1">Next »</span> </li> <li ng-class="{disabled: pageTracking.pageNumber==pageTracking.totalPages - 1}" class="pagination-last"> <a ng-click="pageTracking.pageNumber=pageTracking.totalPages - 1" ng-hide="pageTracking.pageNumber==pageTracking.totalPages - 1">Last</a> <span ng-show="pageTracking.pageNumber==pageTracking.totalPages - 1">Last</span> </li> </ul> '),a.put("src/templates/rx-data-table.html",'<div class="data-table"> <div class=\'alert\' ng-show="updateFieldStatus" ng-class="{\'loading\': updateFieldStatus.status==\'saving\', \'success\': updateFieldStatus.status==\'success\', \'error\': updateFieldStatus.status==\'error\'}"> {{ updateFieldStatus.message }} </div> <div class="data-info-row"> <strong ng-if="!pager.showAll">{{pager.first}} - {{pager.last}} of <span class=\'total-data-items\'>{{pager.total}} {{ itemName && itemName || \'Items\' }}</span></strong> <strong ng-if="pager.showAll">{{ (listOfData().length> 0) && 1 || 0 }} - {{ listOfData().length }} of {{ listOfData().length }}</strong> <div class="data-table-config-container" ng-if="enableColumnReordering||enableColumnMultiSort" ng-class="{\'dropdown-shown\': configurationVisible}"> <button class="btn-link" ng-click="toggleVisibility()"> <i class="fa fa-table data-table-config-icon" title="Configure Data Table"></i> </button> <div class="data-table-config reveal-animation" ng-show="configurationVisible"> <div class="header" ng-if="enableColumnMultiSort">Sorting</div> <div class="data-table-multi-sort" ng-if="enableColumnMultiSort"> <div class="data-config-row"> <div class="multi-sort-select header">Column</div> <div class="multi-sort-reverse-icon header">Dir</div> <div class="multi-sort-remove-icon header"><span ng-show="predicate.length> 1">Rem</span></div> </div> <div class="data-config-row" ng-repeat="pred in predicate" ng-init="predColumn=decompilePredicateString(pred)"> <div class="multi-sort-select"> <select name="sort-{{$index}}" ng-model="predColumn.column" ng-change="updatePredicate($index, predColumn.column)"> <option ng-repeat="column in getConfig() | UnusedSorts:predicate:predColumn.column" value="{{ getSortField(column) }}" ng-selected="getSortField(column)==predColumn.column">{{ column.title }}</option> </select> </div> <button class="btn-link multi-sort-reverse-icon" ng-click="reversePredicate($index)"> <i class="fa" ng-class="{\'fa-sort-amount-asc\': !parseReverseSort(predColumn.column, predColumn.reverse), \'fa-sort-amount-desc\': parseReverseSort(predColumn.column, predColumn.reverse)}"></i> </button> <div class="multi-sort-remove-icon"> <button class="btn-link" ng-click="removePredicate($index)"> <i class="fa fa-times" ng-if="predicate.length> 1"></i> </button> </div> </div> <button class="btn-link multi-sort-add" ng-if="(predicate.length <configObject.length) && (predicate[predicate.length-1].length> 0)" ng-click="predicate.push(\'\')"> Add New Sort </button> </div> <div class="header" ng-if="enableColumnReordering">Column Configuration</div> <div class="data-table-column-display" ng-if="enableColumnReordering"> <div class="data-config-row"> <div class="header">Column Presets</div> </div> <div class="data-config-row column-preset-row"> <select ng-options="preset.value as preset.text for preset in getColumnPresetSelects()" ng-model="columnDisplay.index"></select> </div> <div class="data-config-row"> <div class="header">Column Order</div> </div> <div class="data-config-row" ng-repeat="column in getConfig()"> <div class="data-config-column-title"> {{ column.title }} </div> <div class="column-order-arrows"> <button class="btn-link btn-move-down" ng-if="!$last" ng-click="moveColumnDown($index)"> <i class="fa fa-arrow-down"></i> </button> <button class="btn-link btn-move-up" ng-if="!$first" ng-click="moveColumnUp($index)"> <i class="fa fa-arrow-up"></i> </button> </div> <div class="column-hide-display"> <button class="btn-link" ng-click="removeColumn($index)"> <i class="fa fa-times"></i> </button> </div> </div> <div class="data-config-row" ng-if="getAvailableColumns().length> 0"> <div class="header">Available Columns</div> </div> <div class="data-config-row column-show-columns" ng-if="getAvailableColumns().length> 0"> <select ng-model="addColumn.index" ng-options="column.value as column.text for column in getAvailableColumns()"> </select> <button ng-click="showColumn(addColumn.index)" class="button button-tiny">add</button> </div> </div> </div> </div> </div> <div class="data-header"> <div class="data-header-cell data-column-{{ $index + 1 }} flex-columns-{{ column.cols }}" ng-repeat="column in getConfig()" data-title="{{ column.title && column.title || column.dataField }}"> <span class="checkbox-span" ng-if="column.checkbox && column.checkAll"> <input ng-click="checkAll(this)" type="checkbox" id="check_all_checkbox"> </span> <button ng-if="!column.checkbox" ng-click="sort($event, column)" class="btn-link data-link"> <span class=\'data-header-cell-content\'>{{ column.title }}</span> <i ng-if="column.help" class="fa fa-question-circle" data-popover="{{ column.help.body }}" data-popover-title="{{ column.help.title }}" data-trigger="focus"></i> <i class="fa fa-chevron-down" ng-show="sortedBy(column, true)"></i> <i class="fa fa-chevron-up" ng-show="sortedBy(column)"></i> </button> </div> </div> <div class="data-row data-row-{{ $index + 1}}" ng-repeat="row in listOfData() | orderBy:predicate | Paginate: pager track by row[rowKey]" data-row-key="{{row[rowKey]}}" ng-class="rowClass(row)"> <div class="data-cell flex-columns-{{ column.cols }} data-column-{{ $index + 1}} {{ column.class }}" ng-repeat="column in getConfig()" data-title="{{ column.title }}" ng-class="getNGClass(column, row)"> <div ng-if="column.checkbox" class="checkbox"> <input type="checkbox" value="{{ row[column.dataField] }}" ng-click="clickAction(\'{{ row[column.dataField] }}\')" id="checkbox_{{ row[column.dataField] }}"> </div> <div ng-if="!column.checkbox"> <i ng-repeat="icon in iconUnwrap(column, row, \'i\')" class="data-table-cell-icon {{ icon.name }}"></i> <div ng-repeat="icon in iconUnwrap(column, row, \'div\')" class="data-table-cell-icon {{ icon.class }}" alt="{{ icon.alt }}"></div> <a ng-if="column.linkField && hasValue(row, column)" href="{{ row[column.linkField] }}" class="data-cell-content" target="_blank">{{ row | ColumnValue:column }}</a> <span ng-if="!column.linkField && hasValue(row, column)" class="data-cell-content"> <span ng-if="!allowEditing(column,row)">{{ row | ColumnValue:column:false }}</span> <span ng-if="allowEditing(column,row)" class="data-editable"> <span ng-switch="getEditType(column, row)"> <span ng-switch-when="select" class="data-editable-field" editable-select="row[column.dataField]" e-ng-options="o.value as o.text for o in getEditableOptions(column, row)" buttons="no" onbeforesave="updateField(column, row, $data, this)">{{ row | ColumnValue:column }}</span> <span ng-switch-when="typeahead" class="data-editable-field" editable-text="row[column.dataField]" e-typeahead="o.value as o.text for o in getEditableOptions(column, row) | filter:$viewValue" e-typeahead-loading="loadingData" e-typeahead-on-select="updateField(column, row, $data, this)" buttons="no" onshow="getEditableOptions(column, row)">{{ row | ColumnValue:column }}</span> <span ng-switch-default class="data-editable-field" editable-text="row[column.dataField]" onbeforesave="updateField(column, row, $data, this)">{{ row | ColumnValue:column }}</span> <i class="fa fa-refresh data-table-type-loader" ng-show="loadingData"></i> <button class="data-table-field-nullable btn-link" ng-if="column.editable.nullable" ng-click="nullField(column, row, this)" title="Remove {{ column.title }} Value"> <i class="fa fa-times fa-lg"></i> </button> </span> </span> </span> </div> </div> </div> <div ng-if="!pager.showAll" class="pagination-container" ng-show="pager.total> 0"> <rx-data-table-paginate page-tracking="pager"/> </div> <div ng-if="!pager.showAll" class="items-per-page-container" ng-show="pager.total> 0"> <rx-data-table-items-per-page pager="pager" label="{{ itemName && itemName || \'Items\'}} Per Page"/></rx-data-table-items-per-page> </div> </div> ')}]);
//# sourceMappingURL=dist/scripts/rx-data-table.min.map